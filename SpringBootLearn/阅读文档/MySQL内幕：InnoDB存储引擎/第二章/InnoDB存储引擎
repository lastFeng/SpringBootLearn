1. InnoDB存储引擎的体系结构：
	1. 后台线程：多线程模型
		Master Thread：	主要负责将缓存池中的数据异步刷新到磁盘，保证数据的一致性
						包括脏页的刷新、合并插入缓存（INSERT BUFFER）、UNDO页的回收
		
		IO Thread：	使用大量的AIO（Async IO）来处理写IO请求
					主要负责这些IO请求的回调（call back）处理
					write、read、insert buffer、log IO Thread
		
		Purge Thread：	回收已经使用并分配的UNDO页
	
	2. 内存
		缓冲池：由于是基于磁盘存储的，所以需要使用缓冲池来提高数据库的整体性能
		
				首先：将从磁盘读到的页存放在缓冲池中，这个过程称为将页“FIX”在缓冲池中
				下一次再读相同的页时，首先判断该页是否存在缓冲池中。若存在，称该页在缓冲池中被命中
				直接读取该页。否则，读取磁盘上的页。
				
				对于数据库中页的修改操作，则首先修改在缓冲池中的页，然后再以一定的频率刷新到磁盘中。--Checkpoint
				
				缓存数据页类型有：索引页、数据页、undo页、插入缓冲、自适应哈希索引、InnoDB存储的锁信息、数据字典信息等
				
		重做日志缓冲（redo log buffer）：首相将重做日志信息放入该缓冲区，然后按照一定的频率进行刷新，
				一般都是每秒刷新，只要考虑缓冲区的大小能不能在刷新时间内不会溢出，默认大小为8MB
				并且还设有三种情况的刷新：
					a. Master Thread每一秒将重做日志刷新到外部磁盘的重做日志文件；
					b. 每个事务提交时会将重做日志缓冲刷新到重做日志中
					c. 当重做日志缓冲池剩余空间小于1/2时，将刷新
		
		额外的内存池：
		

2. Checkpoint技术
	只要数据修改了就进行刷新，性能就会变得很差。但同时为了避免发生数据丢失的问题，当前事务数据库系统普遍采用Write Ahead Log策略，即先重做日志，再修改页。
	
	Checkpoint为了解决以下几个问题：
		1. 缩短数据库的恢复时间；
		2. 缓冲池不够用时，将脏页刷新到磁盘；
		3. 重做日志不可用时，刷新脏页。
				
		